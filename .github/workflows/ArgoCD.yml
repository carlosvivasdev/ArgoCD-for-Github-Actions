name: GitHub CI/CD
on: [push]
jobs:
  environment:
    name: Preparacion de entorno
    runs-on: ubuntu-latest
    steps:
    - name: Conexion a k8s
      run: |
        mkdir -p ${HOME}/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ${HOME}/.kube/config
        kubectl config get-contexts
        kubectl config use-context do-nyc1-k8s-carlosvivas

    - name: Verificacion de ArgoCD
      id: check-argocd
      run: |
        if kubectl get pods -n argocd | grep -q "argocd-server"; then
          echo "ArgoCD está instalado y ejecutándose."
          echo "outcome=success" >> $GITHUB_ENV
        else
          echo "ArgoCD no está instalado o no se está ejecutando."
          echo "outcome=failure" >> $GITHUB_ENV
        fi

    - name: Instalar ArgoCD
      if: env.outcome == 'failure'
      run: |
        kubectl get namespace argocd || kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: Comprobacion de ArgoCLI
      run: |
        if command -v argocd > /dev/null; then
          echo "ArgoCLI está instalado."
          echo "argocli_installed=true" >> $GITHUB_ENV
        else
          echo "ArgoCLI no está instalado."
           echo "argocli_installed=false" >> $GITHUB_ENV
        fi

    - name: Instalar Argo CLI y dependencias
      if: env.argocli_installed == 'false'
      run: |
        sudo apt-get update && sudo apt-get install -y curl jq
        sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.0/argocd-linux-amd64
        sudo chmod +x /usr/local/bin/argocd

    - name: Configuracion de acceso a ArgoCD
      if: env.outcome == 'failure'
      run: |
        EXTERNAL_IP=$(kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        NODEPORT=$(kubectl get svc argocd-server -n argocd -o json | jq -r '.spec.ports[] | select(.port==443) | .nodePort')
        PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        argocd login $EXTERNAL_IP:$NODEPORT --username admin --password $PASSWORD --insecure
        argocd account update-password --account admin --current-password $PASSWORD --new-password HEP2024.
    
    - name: Login ArgoCD
      run: |
        EXTERNAL_IP=$(kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        NODEPORT=$(kubectl get svc argocd-server -n argocd -o json | jq -r '.spec.ports[] | select(.port==443) | .nodePort')
        argocd login $EXTERNAL_IP:$NODEPORT --username admin --password HEP2024. --insecure

    - name: Coneccion a repositorio de manifiesto
      run: argocd repo add https://github.com/duditas-xd/dash-iot-manifest.git --username carlosvivasdev --password ${{ secrets.GH_TOKEN }}

    - name: Crear proyecto en ArgoCD
      run: argocd proj create dashiot -d https://kubernetes.default.svc,dashiot -s https://github.com/duditas-xd/dash-iot-manifest.git

    - name: Crear namespace en k8s
      run: |
        if kubectl get namespace dashiot; then
          echo "El namespace 'dashiot' ya existe";
        else
          kubectl create namespace dashiot;
          echo "Namespace 'dashiot' creado";
        fi

    #despliegue de aplicaciones
    - name: Despliegue de EMQX
      run: |
        argocd app create emqx \
          --repo https://github.com/duditas-xd/dash-iot-manifest.git \
          --revision main --path ./k8s/emqx \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace dashiot \
          --project dashiot
        
    - name: ------------ Informacion de ArgoCD ------------
      run: |
        EXTERNAL_IP=$(kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        NODEPORT=$(kubectl get svc argocd-server -n argocd -o json | jq -r '.spec.ports[] | select(.port==443) | .nodePort')
        echo "ArgoCD = https://$EXTERNAL_IP:$NODEPORT"