name: GitHub CI/CD
on: [push]

jobs:
  environment:
    name: Preparacion de entorno
    runs-on: ubuntu-latest
    steps:
    - name: repo
      uses: actions/checkout@v4  
    - name: Cache de dependencias
      uses: actions/cache@v4
      with:
        path: |
          ~/.kube
          /usr/local/bin/argocd
        key: ${{ runner.os }}-argo-deps

    - name: Configurar kubeconfig
      run: |
        mkdir -p ${HOME}/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ${HOME}/.kube/config
        kubectl config use-context do-nyc1-k8s-carlosvivas

    - name: Verificacion de ArgoCD
      id: check-argocd
      run: |
        if kubectl get pods -n argocd | grep -q "argocd-server"; then
          echo "ArgoCD está instalado."
          echo "outcome=success" >> $GITHUB_ENV
        else
          echo "ArgoCD no está instalado."
          echo "outcome=failure" >> $GITHUB_ENV
        fi

    - name: Instalar ArgoCD si no existe
      if: env.outcome == 'failure'
      run: |
        kubectl get namespace argocd || kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: Obtener EXTERNAL_IP y NODEPORT
      id: get-node-info
      run: |
        EXTERNAL_IP=$(kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        NODEPORT=$(kubectl get svc argocd-server -n argocd -o json | jq -r '.spec.ports[] | select(.port==443) | .nodePort')
        echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
        echo "NODEPORT=$NODEPORT" >> $GITHUB_ENV

    - name: Verificar o instalar Argo CLI
      run: |
        if ! command -v argocd > /dev/null; then
          echo "Instalando ArgoCLI..."
          sudo apt-get update && sudo apt-get install -y curl jq
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.0/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
        else
          echo "ArgoCLI ya está instalado."
        fi

    - name: Configurar acceso a ArgoCD si no instalado
      if: env.outcome == 'failure'
      run: |
        PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        argocd login ${{ env.EXTERNAL_IP }}:${{ env.NODEPORT }} --username admin --password $PASSWORD --insecure
        argocd account update-password --account admin --current-password $PASSWORD --new-password ${{ secrets.ARGO_PASSWORD }}
        argocd logout ${{ env.EXTERNAL_IP }}:${{ env.NODEPORT }}

    - name: Login en ArgoCD
      run: |
        argocd login ${{ env.EXTERNAL_IP }}:${{ env.NODEPORT }} --username admin --password ${{ secrets.ARGO_PASSWORD }} --insecure

    - name: Conectar repo de manifiesto a ArgoCD
      run: argocd repo add ${{ vars.REPO_MANIFEST }} --password ${{ secrets.GH_TOKEN }}

    - name: Crear proyecto en ArgoCD
      run: |
        argocd proj create dash-iot \
          -d https://kubernetes.default.svc,${{ vars.NAMESPACE }} \
          -s ${{ vars.REPO_MANIFEST }} \
          --allow-cluster-resource PersistentVolume

    - name: Verificar y crear namespace
      run: kubectl get namespace ${{ vars.NAMESPACE }} || kubectl create namespace ${{ vars.NAMESPACE }}
    
    - name: Crear secretos
      run: |
        kubectl get secret ghcr-login-secret -n ${{ vars.NAMESPACE }} || kubectl create secret docker-registry ghcr-login-secret -n ${{ vars.NAMESPACE }} --docker-server=https://ghcr.io --docker-username=${{ github.actor }} --docker-password=${{ secrets.GH_TOKEN }}
        kubectl get secret ghcr-login-secret -n argocd || kubectl create secret docker-registry ghcr-login-secret -n argocd --docker-server=https://ghcr.io --docker-username=${{ github.actor }} --docker-password=${{ secrets.GH_TOKEN }}

    - name: Despliegue de EMQX
      run: |
        argocd app create emqx \
          --repo ${{ vars.REPO_MANIFEST }} \
          --revision main --path ./k8s/emqx \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace ${{ vars.NAMESPACE }} \
          --sync-policy automated \
          --auto-prune \
          --self-heal \
          --upsert \
          --project dash-iot

    - name: Despliegue de api-dash
      run: |
        argocd app create -f "./argocd/api-dash"

    - name: Despliegue de Grafana
      run: |
        argocd app create grafana \
          --repo ${{ vars.REPO_MANIFEST }} \
          --revision main --path ./k8s/grafana \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace ${{ vars.NAMESPACE }} \
          --sync-policy automated \
          --auto-prune \
          --self-heal \
          --upsert \
          --project dash-iot

    - name: Informacion de ArgoCD
      run: echo "ArgoCD = https://${{ env.EXTERNAL_IP }}:${{ env.NODEPORT }}"
 